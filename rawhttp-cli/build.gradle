import groovy.text.SimpleTemplateEngine
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
    id 'signing'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

description = 'RawHTTP CLI Tool'
version = rawHttpCliVersion

mainClassName = 'rawhttp.cli.Main'
final runnableJarName = 'rawhttp.jar'

final generatedJavaSources = "$buildDir/java-generated-sources"

sourceSets.main.java.srcDir generatedJavaSources

dependencies {
    implementation project(':rawhttp-core')
    implementation project(':rawhttp-cookies')
    implementation project(':rawhttp-req-in-edit')
    compileOnly 'org.jetbrains:annotations:22.0.0'
    testImplementation 'junit:junit:4.12'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'rawhttp.cli',
                'Implementation-Version': version,
                'Implementation-Vendor': 'Renato Athaydes',
                'Main-Class': 'rawhttp.cli.Main'
    }
}

task createClasspathDir(type: Copy) {
    from configurations.runtimeClasspath
    into(["$buildDir", "classpath"].join(File.separator))
}

task nativeExec(type: Exec) {
    dependsOn createClasspathDir, jar
    String nativeImageExec
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        finalizedBy 'zipNativeExec'
        nativeImageExec = 'native-image.cmd'
        outputs.file(["$buildDir", "rawhttp.exe"].join(File.separator))
    } else {
        finalizedBy 'tarNativeExec'
        nativeImageExec = 'native-image'
        outputs.file(["$buildDir", "rawhttp"].join(File.separator))
    }

    // native-image --language:js --enable-https -cp "build/classpath/*" -jar build/libs/rawhttp-cli-1.3.2.jar
    commandLine nativeImageExec, '--language:js', '--enable-https',
            '-cp', '"' + ["$buildDir", 'classpath', '*'].join(File.separator) + '"',
            '-jar', jar.archiveFile.get(),
            outputs.files.first().path
    workingDir projectDir
}

task tarNativeExec(type: Tar) {
    archiveFileName = "rawhttp.tar.gz"
    compression = Compression.GZIP
    destinationDirectory = layout.buildDirectory
    from nativeExec
}

task zipNativeExec(type: Zip) {
    archiveFileName = "rawhttp.zip"
    destinationDirectory = layout.buildDirectory
    from nativeExec
}

task fatJar(type: Jar, group: 'build') {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    final taskInputs = inputs
    // declare dependency on other project jars
    [project(':rawhttp-core'), project(':rawhttp-cookies'), project(':rawhttp-req-in-edit')].each { p ->
        p.tasks.withType(org.gradle.jvm.tasks.Jar) {
            taskInputs.file(it.archiveFile)
        }
    }
    taskInputs.file(jar.archiveFile)
    archiveName = runnableJarName
    classifier "all"
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    with jar
    dependsOn jar
}

ext.runnableJar = new File(buildDir, 'libs/' + runnableJarName).absolutePath

task generateJavaSources(
        description: 'Generates Java sources based on the java-templates directory') {
    def properties = project.properties
    def templates = fileTree(dir: 'src/main/java-templates')
    def destination = file(generatedJavaSources)

    doLast {
        templates.visit { item ->
            def file = item.file
            if (file.isFile()) {
                def transformedTemplate = new SimpleTemplateEngine().createTemplate(file).make(properties)
                new File(destination, item.relativePath.toString()).withWriter {
                    transformedTemplate.writeTo it
                }
            } else {
                new File(destination, item.relativePath.toString()).mkdirs()
            }
        }
    }
}

compileJava.dependsOn generateJavaSources

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier "sources"
    extension "jar"
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc
}

/* Publishing config */

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'rawhttp-cli'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                inceptionYear = '2017'
                name = project.name
                packaging = 'jar'
                description = project.description

                url = 'https://renatoathaydes.github.io/rawhttp'

                scm {
                    connection = 'git@github.com:renatoathaydes/rawhttp.git'
                    developerConnection = 'git@github.com:renatoathaydes/rawhttp.git'
                    url = 'https://github.com/renatoathaydes/rawhttp'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'renatoathaydes'
                        name = 'Renato Athaydes'
                        email = 'renato@athaydes.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username project.properties['ossrhUsername']?.toString()
                password project.properties['ossrhPassword']?.toString()
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
