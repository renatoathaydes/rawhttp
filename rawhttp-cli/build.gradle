import groovy.text.SimpleTemplateEngine
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
    id 'signing'
    id 'org.graalvm.buildtools.native' version '0.9.6'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

description = 'RawHTTP CLI Tool'
version = rawHttpCliVersion

mainClassName = 'rawhttp.cli.Main'
final runnableJarName = 'rawhttp.jar'

final generatedJavaSources = "$buildDir/java-generated-sources"

sourceSets.main.java.srcDir generatedJavaSources

configurations {
    patchedJar
}

dependencies {
    implementation project(':rawhttp-core')
    implementation project(':rawhttp-cookies')
    implementation project(':rawhttp-req-in-edit')
    patchedJar project(':patched-jars:icu4j')
    patchedJar project(':patched-jars:mustache')
    compileOnly 'org.jetbrains:annotations:22.0.0'
    testImplementation 'junit:junit:4.12'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'rawhttp.cli',
                'Implementation-Version': version,
                'Implementation-Vendor': 'Renato Athaydes',
                'Main-Class': 'rawhttp.cli.Main'
    }
}

task fatJar(type: Jar, group: 'build') {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    final taskInputs = inputs
    // declare dependency on other project jars
    [project(':rawhttp-core'), project(':rawhttp-cookies'), project(':rawhttp-req-in-edit')].each { p ->
        p.tasks.withType(org.gradle.jvm.tasks.Jar) {
            taskInputs.file(it.archiveFile)
        }
    }
    taskInputs.file(jar.archiveFile)
    archiveName = runnableJarName
    classifier "all"
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    with jar
    dependsOn jar
}

ext.runnableJar = new File(buildDir, 'libs/' + runnableJarName).absolutePath

task generateJavaSources(
        description: 'Generates Java sources based on the java-templates directory') {
    def properties = project.properties
    def templates = fileTree(dir: 'src/main/java-templates')
    def destination = file(generatedJavaSources)

    doLast {
        templates.visit { item ->
            def file = item.file
            if (file.isFile()) {
                def transformedTemplate = new SimpleTemplateEngine().createTemplate(file).make(properties)
                new File(destination, item.relativePath.toString()).withWriter {
                    transformedTemplate.writeTo it
                }
            } else {
                new File(destination, item.relativePath.toString()).mkdirs()
            }
        }
    }
}

compileJava.dependsOn generateJavaSources

def libs = "${buildDir}/libs"
def image = "${buildDir}/image"

task deps( type: Copy ) {
    from configurations.runtimeClasspath, {
        exclude 'mustache-*', 'icu4j-*'
    }
    from configurations.patchedJar
    into libs
}

task jlink( type: Exec ) {
    dependsOn jar, deps
//    finalizedBy copyShellScriptToImage, project( ':splash-maker' ).tasks.withType( JavaExec )
    inputs.files( sourceSets*.allSource )
    outputs.dir( image )
    def options = [
            '--module-path', libs,
            '--vm=server', // options: client|server|minimal|all
            '--add-modules', 'java.base,jdk.crypto.ec,' +
                    'org.graalvm.sdk,org.graalvm.truffle,org.graalvm.js,org.webjars.mustache,' +
                    'rawhttp.req_in_edit,rawhttp.core,rawhttp.cookies,rawhttp.cli',
            '--output', image,
    //        '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'
    ]
    def jlink = System.getProperty( 'java.home' ) + '/bin/jlink'
    commandLine( [ jlink ] + options )
    doFirst { new File( image ).deleteDir() }
}

task packageImage( type: Zip ) {
    outputs.upToDateWhen { false }
    dependsOn jlink
    from image
    into "rawhttp"
    include '**/*'
    archiveName "rawhttp-${project.version}.zip"
    destinationDir buildDir
}

task jpackage( type: Exec ) {
    dependsOn jlink
    def osOptions = Os.isFamily( Os.FAMILY_WINDOWS )
            ? [ '--win-per-user-install',
                '--win-dir-chooser',
                '--icon', 'site/source/static/sam.ico' ]
            : Os.isFamily( Os.FAMILY_MAC )
            ? [
            '--icon', 'site/source/static/sam.ico' ]
            : [ '--linux-menu-group', 'programming',
                '--linux-deb-maintainer', 'renato@athaydes.com',
                '--linux-rpm-license-type', 'GPLv3',
                '--linux-shortcut' ]
    def options = osOptions + [
            '--name', 'rawhttp',
            '--app-image', image,
            '--app-version', project.version,
            '--copyright', 'Copyright 2015-2021 Renato Athaydes',
            '--description', project.description,
            '--type', 'deb',
            '--vendor', 'Renato Athaydes',
            '--license-file', 'LICENSE',
            '--dest', buildDir ]
    def jpackage = System.getProperty( 'java.home' ) + '/bin/jpackage'
    commandLine( [ jpackage ] + options )
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier "sources"
    extension "jar"
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    from javadoc
}

/* Publishing config */

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'rawhttp-cli'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                inceptionYear = '2017'
                name = project.name
                packaging = 'jar'
                description = project.description

                url = 'https://renatoathaydes.github.io/rawhttp'

                scm {
                    connection = 'git@github.com:renatoathaydes/rawhttp.git'
                    developerConnection = 'git@github.com:renatoathaydes/rawhttp.git'
                    url = 'https://github.com/renatoathaydes/rawhttp'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'renatoathaydes'
                        name = 'Renato Athaydes'
                        email = 'renato@athaydes.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username project.properties['ossrhUsername']?.toString()
                password project.properties['ossrhPassword']?.toString()
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
